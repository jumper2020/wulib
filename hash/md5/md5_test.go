package md5

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestMd5Hash_Hash(t *testing.T) {

	//h := md5.New()
	//io.WriteString(h, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
	//fmt.Printf("stand: %x\n", h.Sum(nil))

	a := assert.New(t)
	var md5 Md5Hash

	t.Run("test1", func(t *testing.T){
		src := []byte("")
		expected := []byte{0xd4,0x1d,0x8c,0xd9,0x8f,0x00,0xb2,0x04,0xe9,0x80,0x09,0x98,0xec,0xf8,0x42,0x7e}
		a.Equal(expected, md5.Hash(src), "invalid")
	})

	t.Run("test2", func(t *testing.T){
		src := []byte("a")
		expected := []byte{0x0c,0xc1,0x75,0xb9,0xc0,0xf1,0xb6,0xa8,0x31,0xc3,0x99,0xe2,0x69,0x77,0x26,0x61}
		a.Equal(expected, md5.Hash(src), "invalid")
	})

	t.Run("test3", func(t *testing.T){
		src := []byte("abc")
		expected := []byte{0x90,0x01,0x50,0x98,0x3c,0xd2,0x4f,0xb0,0xd6,0x96,0x3f,0x7d,0x28,0xe1,0x7f,0x72}
		a.Equal(expected, md5.Hash(src), "invalid")
	})

	t.Run("test4", func(t *testing.T){
		src := []byte("message digest")
		expected := []byte{0xf9,0x6b,0x69,0x7d,0x7c,0xb7,0x93,0x8d,0x52,0x5a,0x2f,0x31,0xaa,0xf1,0x61,0xd0}
		a.Equal(expected, md5.Hash(src), "invalid")
	})

	t.Run("test5", func(t *testing.T){
		src := []byte("abcdefghijklmnopqrstuvwxyz")
		expected := []byte{0xc3,0xfc,0xd3,0xd7,0x61,0x92,0xe4,0x00,0x7d,0xfb,0x49,0x6c,0xca,0x67,0xe1,0x3b}
		a.Equal(expected, md5.Hash(src), "invalid")
	})

	t.Run("test6", func(t *testing.T){
		src := []byte("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
		expected := []byte{0xf2,0x99,0x39,0xa2,0x5e,0xfa,0xba,0xef,0x3b,0x87,0xe2,0xcb,0xfe,0x64,0x13,0x15}
		a.Equal(expected, md5.Hash(src), "invalid")
	})

	t.Run("test7", func(t *testing.T){
		src := []byte("8a683566bcc7801226b3d8b0cf35fd97")
		expected := []byte{0xcf,0x2c,0xb5,0xc8,0x9c,0x5e,0x5e,0xee,0xbe,0xf4,0xa7,0x6b,0xec,0xdd,0xfc,0xfd}
		a.Equal(expected, md5.Hash(src), "invalid")
	})
}
