package aes

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

//func keySchedule(src []byte, ksi int) []byte {
func TestKeySchedule(t *testing.T){
	a := assert.New(t)

	t.Run("test1", func(t *testing.T) {
		rst := keySchedule(
			[]byte{0x2b,0x28,0xab,0x09,0x7e,0xae,0xf7,0xcf,0x15,0xd2,0x15,0x4f,0x16,0xa6,0x88,0x3c}, 0)
		//[]byte{0x54,0x68,0x61,0x74,0x73,0x20,0x6D,0x79,0x20,0x4B,0x75,0x6E,0x67,0x20,0x46,0x75}, 0)
		//[]byte{0x1b,0x22,0xcb,0x03,0x7c,0xae,0xf4,0xba,0x14,0x01,0x1b,0x4f,0x09,0xa6,0x88,0x4a},0)
		a.Equal(
			[]byte{0xa0,0x88,0x23,0x2A,0xfa,0x54,0xA3,0x6C,0xfe,0x2C,0x39,0x76,0x17,0xB1,0x39,0x05},
			//[]byte{0xE2,0x32,0xFC,0xF1,0x91,0x12,0x91,0x88,0xB1,0x59,0xE4,0xE6,0xD6,0x79,0xA2,0x93},
			//[]byte{0x03,0x01,0xf1,0x23,0xab,0x22,0xac,0xa3,0x4c,0x03,0x02,0x39,0xa5,0x88,0x22,0x39},
			rst,
			"invalid rst")
	})
}

func TestShiftRows(t *testing.T){
	a := assert.New(t)

	t.Run("test1", func(t *testing.T){
		rst := shiftRows(
			[]byte{0xd4,0xe0,0xb8,0x1e,0x27,0xbf,0xb4,0x41,0x11,0x98,0x5d,0x52,0xae,0xf1,0xe5,0x30})
		a.Equal(
			[]byte{0xd4,0xe0,0xb8,0x1e,0xbf,0xb4,0x41,0x27,0x5d,0x52,0x11,0x98,0x30,0xae,0xf1,0xe5}, rst,
			"invalid rst")
	})
}


//func multiGroup(src1 []uint8, src2 []uint8) []uint8 {
func TestMultiGroup(t *testing.T){
	a := assert.New(t)
	t.Run("test1", func(t *testing.T) {
		rst := multiGroup([]uint8{0xd4, 0xbf, 0x5d, 0x30},
			[]uint8{0x02,0x03,0x01,0x01,0x01,0x02,0x03,0x01,0x01,0x01,0x02,0x03,0x03,0x01,0x01,0x02})
		a.Equal([]uint8{0x04,0x66,0x81,0xe5}, rst, "invalid rst")
	})
}

//func mixColumns(src []uint8) []uint8{
func TestMixColumns(t *testing.T){

	a := assert.New(t)
	t.Run("test1", func(t *testing.T) {
		rst := mixColumns([]uint8{0xd4,0xe0,0xb8,0x1e,0xbf,0xb4,0x41,0x27,0x5d,0x52,0x11,0x98,0x30,0xae,0xf1,0xe5})
		a.Equal([]uint8{0x04,0xe0,0x48,0x28,0x66,0xcb,0xf8,0x06,0x81,0x19,0xd3,0x26,0xe5,0x9a,0x7a,0x4c}, rst, "invalid rst")
	})
}


//func (self *EncryptAes) Encrypt(src []byte, key []byte) ([]byte, error) {
func TestEncryptAes_Encrypt(t *testing.T){

	var enc EncryptAes
	a := assert.New(t)
	t.Run("test1", func(t *testing.T) {
		//ks := []uint8{0x54,0x68,0x61,0x74,0x73,0x20,0x6D,0x79,0x20,0x4B,0x75,0x6E,0x67,0x20,0x46,0x75}
		ks := []uint8{0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88}
		getKeys(ks)
		fmt.Printf("keys: %x\n", keys)
		rst,_ := enc.Encrypt(
			[]byte{0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x12,0x34,0x56,0x78,0x87,0x65,0x43,0x21},
			ks)
		a.Equal(
			[]byte{0x51,0xaf,0xb9,0x7e,0x9c,0x28,0x1a,0x8e,0x86,0x98,0x1e,0xf2,0xc2,0x21,0x16,0x6c},
			rst, "invalid rst")
	})
}
