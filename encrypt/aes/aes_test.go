package aes

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestKeySchedule(t *testing.T){
	a := assert.New(t)

	t.Run("test1", func(t *testing.T) {
		rst := keySchedule(
			//[]byte{0x2b,0x28,0xab,0x09,0x7e,0xae,0xf7,0xcf,0x15,0xd2,0x15,0x4f,0x16,0xa6,0x88,0x3c}, 0)
		[]byte{0x54,0x68,0x61,0x74,0x73,0x20,0x6D,0x79,0x20,0x4B,0x75,0x6E,0x67,0x20,0x46,0x75}, 0)
		//[]byte{0x1b,0x22,0xcb,0x03,0x7c,0xae,0xf4,0xba,0x14,0x01,0x1b,0x4f,0x09,0xa6,0x88,0x4a},0)
		a.Equal(
			//[]byte{0xa0,0x88,0x23,0x2A,0xfa,0x54,0xA3,0x6C,0xfe,0x2C,0x39,0x76,0x17,0xB1,0x39,0x05},
			[]byte{0xE2,0x32,0xFC,0xF1,0x91,0x12,0x91,0x88,0xB1,0x59,0xE4,0xE6,0xD6,0x79,0xA2,0x93},
			//[]byte{0x03,0x01,0xf1,0x23,0xab,0x22,0xac,0xa3,0x4c,0x03,0x02,0x39,0xa5,0x88,0x22,0x39},
			rst,
			"invalid rst")
	})
}

func TestGetkeys(t *testing.T){

	a := assert.New(t)

	t.Run("test1", func(t *testing.T) {
		keys := getKeys([]byte{0x54,0x68,0x61,0x74,0x73,0x20,0x6D,0x79,0x20,0x4B,0x75,0x6E,0x67,0x20,0x46,0x75})
		a.Equal([]byte{0x56 ,0x08 ,0x20 ,0x07,0xC7,0x1A,0xB1,0x8F,0x76,0x43,0x55,0x69,0xA0,0x3A,0xF7,0xFA},keys[1])
		a.Equal([]byte{0xB1,0x29,0x3B,0x33,0x05,0x41,0x85,0x92,0xD2,0x10,0xD2,0x32,0xC6,0x42,0x9B,0x69},keys[4])
		a.Equal([]byte{0x28,0xFD,0xDE,0xF8,0x6D,0xA4,0x24,0x4A,0xCC,0xC0,0xA4,0xFE,0x3B,0x31,0x6F,0x26},keys[9])
	})

}

func TestShiftRows(t *testing.T){
	a := assert.New(t)

	t.Run("test1", func(t *testing.T){
		rst := shiftRows(
			[]byte{0x63,0xc0,0xab,0x20,0xeb,0x2f,0x30,0xcb,0x9f,0x93,0xaf,0x2b,0xa0,0x92,0xc7,0xa2})
		a.Equal(
			[]byte{0x63,0x2f,0xaf,0xa2,0xeb,0x93,0xc7,0x20,0x9f,0x92,0xab,0xcb,0xa0,0xc0,0x30,0x2b}, rst,
			"invalid rst")
	})
}


func TestInverseShiftRows(t *testing.T){
	a := assert.New(t)

	t.Run("test1", func(t *testing.T){
		rst := inverseShiftRows(
			[]byte{0x63,0x2f,0xaf,0xa2,0xeb,0x93,0xc7,0x20,0x9f,0x92,0xab,0xcb,0xa0,0xc0,0x30,0x2b})
		a.Equal(
			 []byte{0x63,0xc0,0xab,0x20,0xeb,0x2f,0x30,0xcb,0x9f,0x93,0xaf,0x2b,0xa0,0x92,0xc7,0xa2}, rst,
			"invalid rst")
	})
}

func TestMultiGroup(t *testing.T){
	a := assert.New(t)
	t.Run("test1", func(t *testing.T) {
		rst := multiGroup([]uint8{0xd4, 0xbf, 0x5d, 0x30},
			[]uint8{0x02,0x03,0x01,0x01,0x01,0x02,0x03,0x01,0x01,0x01,0x02,0x03,0x03,0x01,0x01,0x02})
		a.Equal([]uint8{0x04,0x66,0x81,0xe5}, rst, "invalid rst")
	})
}

func TestMixColumns(t *testing.T){

	a := assert.New(t)
	t.Run("test1", func(t *testing.T) {
		rst := mixColumns([]uint8{0x63,0x2f,0xaf,0xa2,0xeb,0x93,0xc7,0x20,0x9f,0x92,0xab,0xcb,0xa0,0xc0,0x30,0x2b})
		a.Equal([]uint8{0xba,0x75,0xf4,0x7a,0x84,0xa4,0x8d,0x32,0xe8,0x8d,0x06,0x0e,0x1b,0x40,0x7d, 0x5d}, rst, "invalid rst")
	})
}


func TestInverseMixColumns(t *testing.T){

	a := assert.New(t)
	t.Run("test1", func(t *testing.T) {
		rst := inverseMixColumns([]uint8{0xba,0x75,0xf4,0x7a,0x84,0xa4,0x8d,0x32,0xe8,0x8d,0x06,0x0e,0x1b,0x40,0x7d, 0x5d})

		a.Equal([]uint8{0x63,0x2f,0xaf,0xa2,0xeb,0x93,0xc7,0x20,0x9f,0x92,0xab,0xcb,0xa0,0xc0,0x30,0x2b}, rst, "invalid rst")
	})
}

func TestEncryptAes_Encrypt(t *testing.T){

	var enc EncryptAes
	a := assert.New(t)
	t.Run("test1", func(t *testing.T) {
		ks := []uint8{0x54,0x68,0x61,0x74,0x73,0x20,0x6D,0x79,0x20,0x4B,0x75,0x6E,0x67,0x20,0x46,0x75}
		//ks := []uint8{0x12,0x34,0x56,0x78,0x87,0x65,0x43,0x21,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x88,0x77}
		rst,_ := enc.Encrypt(
			[]byte{0x54,0x77,0x6F,0x20,0x4F,0x6E,0x65,0x20,0x4E,0x69,0x6E,0x65,0x20,0x54,0x77,0x6F},
			//[]byte{0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x87,0x65,0x43,0x21,0x12,0x34,0x56,0x78},
			ks)
		a.Equal(
			[]byte{0x29,0xC3,0x50,0x5F,0x57,0x14,0x20,0xF6,0x40,0x22,0x99,0xB3,0x1A,0x02,0xD7,0x3A},
			//[]byte{0xc6,0xa8,0xa2,0x95,0xd7,0x66,0xfb,0x52,0xa7,0xcf,0x10,0x39,0x98,0x0a,0xfc,0x15},
			rst, "invalid rst")
	})
}


func TestEncryptAes_Decrypt(t *testing.T){

	var enc EncryptAes
	a := assert.New(t)
	t.Run("test1", func(t *testing.T) {
		ks := []uint8{0x54,0x68,0x61,0x74,0x73,0x20,0x6D,0x79,0x20,0x4B,0x75,0x6E,0x67,0x20,0x46,0x75}
		//ks := []uint8{0x12,0x34,0x56,0x78,0x87,0x65,0x43,0x21,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x88,0x77}
		rst,_ := enc.Decrypt(
			[]byte{0x29,0xC3,0x50,0x5F,0x57,0x14,0x20,0xF6,0x40,0x22,0x99,0xB3,0x1A,0x02,0xD7,0x3A},
			//[]byte{0xc6,0xa8,0xa2,0x95,0xd7,0x66,0xfb,0x52,0xa7,0xcf,0x10,0x39,0x98,0x0a,0xfc,0x15},
			ks)
		a.Equal(
			[]byte{0x54,0x77,0x6F,0x20,0x4F,0x6E,0x65,0x20,0x4E,0x69,0x6E,0x65,0x20,0x54,0x77,0x6F},
			//[]byte{0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x87,0x65,0x43,0x21,0x12,0x34,0x56,0x78},
			rst, "invalid rst")
	})
}
